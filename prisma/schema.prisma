// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  username    String   @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")

  blocks    Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksReceived")
  stories   Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User   @relation(fields: [userId], references: [id])
  userId String
  Post   Post   @relation(fields: [postId], references: [id])
  postId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  Post   Post   @relation(fields: [postId], references: [id])
  postId Int
  User   User   @relation(fields: [userId], references: [id])
  userId String
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])
  followingId String
}

// 关注请求
model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender User @relation("FollowRequestsSent", fields: [senderId], references: [id])

  senderId   String
  receiver   User   @relation("FollowRequestsReceived", fields: [receiverId], references: [id])
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("BlocksReceived", fields: [blockedId], references: [id])
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
